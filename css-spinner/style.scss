$particles: 25; // has to match number of nodes in dom
$particleSize: 5px;
$radius: 25;
$lapDuration: 1500ms;
$color: #D7FF82;

$pi: 3.14159265359;

@function pow($number, $exp) {
  $value: $number;
  @if $exp > 0 {
    // If the exponent is positive, multiply.
    @for $i from 2 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    // If the exponent is negative, divide.
    @for $i from 0 through -$exp {
      $value: $value / $number;
    }
  }
  @else {
    // If the exponent is zero, just return 1.
    $value: 1;
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function sin($angle) {
  $sin: 0;
  $angle: $angle / 180 * $pi;
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@mixin perspective( $perspective ){
  -webkit-perspective: $perspective;
          perspective: $perspective;
}

@mixin animation-name( $name ){
  -webkit-animation-name: $name;
          animation-name: $name;
}

@mixin animation-duration( $duration ){
  -webkit-animation-duration: $duration;
          animation-duration: $duration;
}

@mixin animation-iteration-count( $iteration-count ){
  -webkit-animation-iteration-count: $iteration-count;
          animation-iteration-count: $iteration-count;
}

@mixin animation-timing-function( $timing-function ){
  -webkit-animation-timing-function: $timing-function;
          animation-timing-function: $timing-function;
}

@mixin animation-delay( $animation-delay ){
  -webkit-animation-delay: $animation-delay;
          animation-delay: $animation-delay;
}

@mixin transform( $transform ){
  -webkit-transform: $transform;
          transform: $transform;
}

@mixin keyframes( $name ){
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

html, body {
  overflow: hidden;
  background: #111;
}

img {
  position: absolute;
  top: 0;
  right: 0;
}

.spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  z-index: 2;
  @include perspective( 200px );
  @include transform( rotate( 180deg ));
}

i {
  display: block;
  position: absolute;
  opacity: 1;

  b {
    display: block;
    width: $particleSize;
    height: $particleSize;
    background-color: $color;
    border-radius: $particleSize;
    box-shadow: 0px 0px 10px rgba( $color, 0.5 );
    @include animation-name( spin );
    @include animation-duration( $lapDuration );
    @include animation-iteration-count( infinite );
    @include animation-timing-function( ease-in-out );
  }
}

$accDelay: 0;
$delay: $lapDuration / $particles;
/* #{$delay} */
@for $i from 1 through $particles {
  i:nth-child(#{$i}) {
    $angle: ( $i / $particles ) * 360;
    $extra: sin( $angle ) * ($delay / 2);

    @include transform( rotate( #{$angle}deg ) translate3d( #{$radius}px, 0, 0 ));
    b {
      /* accDelay: #{$accDelay} */
      /* angle: #{$angle} */
      /* sin: #{sin( $angle )} */
      /* extra: #{$extra} */
      /* sum (> 0): #{$delay + $extra} */
      $frameDelay: $accDelay + $delay + $extra;
      $accDelay: $frameDelay;
      /* new accDelay: #{$accDelay} */
      @include animation-delay( $frameDelay );
    }
  }
}

@-webkit-keyframes spin {
  0% {
    -webkit-transform: scale( 1 );
  }
  15% {
    background-color: #fff;
    box-shadow: 0px 0px 10px $color;
    -webkit-transform: translate( -$particleSize/1.33, -$particleSize/2 ) scale( 2 );
  }
  50% {
    box-shadow: 0px 0px 10px rgba( $color, 0.75);
    -webkit-transform: scale( 1 );
  }
}

@keyframes spin {
  0% {
    transform: scale( 1 );
  }
  15% {
    background-color: #fff;
    box-shadow: 0px 0px 10px $color;
    transform: translate( -$particleSize/1.33, -$particleSize/2 ) scale( 2 );
  }
  50% {
    box-shadow: 0px 0px 10px rgba( $color, 0.75 );
    transform: scale( 1 );
  }
}